//   Ordt 190617.01 autogenerated file 
//   Input: hwa_wrapper.rdl
//   Parms: openreg.parms
//   Date: Tue Aug 13 05:29:50 EDT 2019
//

import uvm_pkg::*;
`include "uvm_macros.svh"

// Control Register
class reg_addrmap_PICO_ral_regs_demo_CTRL extends uvm_reg;
  rand uvm_reg_field PRESCALER;
  rand uvm_reg_field MODE;
  rand uvm_reg_field MASTER;
  rand uvm_reg_field DORD;
  rand uvm_reg_field ENABLE;
  rand uvm_reg_field CLK2X;
  
  function new(string name = "reg_addrmap_PICO_ral_regs_demo_CTRL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.PRESCALER = new("PRESCALER");
    this.PRESCALER.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.MODE = new("MODE");
    this.MODE.configure(this, 2, 2, "RO", 1, 2'h0, 1, 0, 0);
    this.MASTER = new("MASTER");
    this.MASTER.configure(this, 1, 4, "RW", 1, 1'h0, 1, 1, 0);
    this.DORD = new("DORD");
    this.DORD.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ENABLE = new("ENABLE");
    this.ENABLE.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.CLK2X = new("CLK2X");
    this.CLK2X.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
  endfunction: build
  
  `uvm_object_utils(reg_addrmap_PICO_ral_regs_demo_CTRL)
endclass : reg_addrmap_PICO_ral_regs_demo_CTRL

// Interrupt Control
class reg_addrmap_PICO_ral_regs_demo_INTCTRL extends uvm_reg;
  rand uvm_reg_field INTLVL;
  
  function new(string name = "reg_addrmap_PICO_ral_regs_demo_INTCTRL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.INTLVL = new("INTLVL");
    this.INTLVL.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
  endfunction: build
  
  `uvm_object_utils(reg_addrmap_PICO_ral_regs_demo_INTCTRL)
endclass : reg_addrmap_PICO_ral_regs_demo_INTCTRL

// Register STATUS
class reg_addrmap_PICO_ral_regs_demo_STATUS extends uvm_reg;
  rand uvm_reg_field WRCOL;
  rand uvm_reg_field IF;
  
  function new(string name = "reg_addrmap_PICO_ral_regs_demo_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.WRCOL = new("WRCOL");
    this.WRCOL.configure(this, 1, 6, "RO", 1, 1'h0, 1, 0, 0);
    this.IF = new("IF");
    this.IF.configure(this, 1, 7, "RO", 1, 1'h0, 1, 0, 0);
  endfunction: build
  
  `uvm_object_utils(reg_addrmap_PICO_ral_regs_demo_STATUS)
endclass : reg_addrmap_PICO_ral_regs_demo_STATUS

// Register RCNT_SAT
class reg_addrmap_PICO_ral_regs_demo_RCNT_SAT extends uvm_reg;
  rand uvm_reg_field str;
  rand uvm_reg_field en;
  rand uvm_reg_field subch;
  
  function new(string name = "reg_addrmap_PICO_ral_regs_demo_RCNT_SAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.str = new("str");
    this.str.configure(this, 10, 16, "WRC", 1, 10'h0, 1, 1, 0);
    this.en = new("en");
    this.en.configure(this, 1, 31, "RW", 0, 1'h1, 1, 1, 0);
    this.subch = new("subch");
    this.subch.configure(this, 5, 26, "WRC", 1, 5'h0, 1, 1, 0);
  endfunction: build
  
  `uvm_object_utils(reg_addrmap_PICO_ral_regs_demo_RCNT_SAT)
endclass : reg_addrmap_PICO_ral_regs_demo_RCNT_SAT

// Block ral_regs_demo
class block_addrmap_PICO_ral_regs_demo extends uvm_reg_block;
  rand reg_addrmap_PICO_ral_regs_demo_CTRL CTRL;
  rand reg_addrmap_PICO_ral_regs_demo_INTCTRL INTCTRL;
  rand reg_addrmap_PICO_ral_regs_demo_STATUS STATUS;
  rand reg_addrmap_PICO_ral_regs_demo_RCNT_SAT RCNT_SAT;
  
  function new(string name = "block_addrmap_PICO_ral_regs_demo");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.CTRL = reg_addrmap_PICO_ral_regs_demo_CTRL::type_id::create("CTRL");
    this.CTRL.configure(this, null, "");
    this.CTRL.build();
    this.default_map.add_reg(this.CTRL, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.INTCTRL = reg_addrmap_PICO_ral_regs_demo_INTCTRL::type_id::create("INTCTRL");
    this.INTCTRL.configure(this, null, "");
    this.INTCTRL.build();
    this.default_map.add_reg(this.INTCTRL, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.STATUS = reg_addrmap_PICO_ral_regs_demo_STATUS::type_id::create("STATUS");
    this.STATUS.configure(this, null, "");
    this.STATUS.build();
    this.default_map.add_reg(this.STATUS, `UVM_REG_ADDR_WIDTH'h8, "RO", 0);
    this.RCNT_SAT = reg_addrmap_PICO_ral_regs_demo_RCNT_SAT::type_id::create("RCNT_SAT");
    this.RCNT_SAT.configure(this, null, "");
    this.RCNT_SAT.build();
    this.default_map.add_reg(this.RCNT_SAT, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_PICO_ral_regs_demo)
endclass : block_addrmap_PICO_ral_regs_demo

// Base block
class block_addrmap_PICO extends uvm_reg_block;
  rand block_addrmap_PICO_ral_regs_demo ral_regs_demo;
  
  function new(string name = "block_addrmap_PICO");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.ral_regs_demo = block_addrmap_PICO_ral_regs_demo::type_id::create("ral_regs_demo",, get_full_name());
    this.ral_regs_demo.configure(this, "");
    this.ral_regs_demo.build();
    this.default_map.add_submap(this.ral_regs_demo.default_map, `UVM_REG_ADDR_WIDTH'h0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_PICO)
endclass : block_addrmap_PICO
